# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."gluetun" = {
    image = "qmcgaw/gluetun";
    environment = {
      "VPN_ENDPOINT_IP" = "178.249.214.65";
      "VPN_ENDPOINT_PORT" = "51820";
      "VPN_SERVICE_PROVIDER" = "custom";
      "VPN_TYPE" = "wireguard";
      "WIREGUARD_ADDRESSES" = "10.2.0.2/32";
      "WIREGUARD_PRIVATE_KEY" = "$(cat ${config.age.secrets.wg-private-key.path})";
      "WIREGUARD_PUBLIC_KEY" = "$(cat ${config.age.secrets.wg-public-key.path})";
    };
    volumes = [
      "/home/evren/services/gluetun:/gluetun:rw"
    ];
    ports = [
      "6011:6011/tcp"
      "6081:6081/tcp"
      "6081:6081/udp"
      "8010:8000/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--network-alias=gluetun"
      "--network=torrent_default"
    ];
  };
  systemd.services."podman-gluetun" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-torrent_default.service"
    ];
    requires = [
      "podman-network-torrent_default.service"
    ];
    partOf = [
      "podman-compose-torrent-root.target"
    ];
    wantedBy = [
      "podman-compose-torrent-root.target"
    ];
  };
  virtualisation.oci-containers.containers."qbittorrent" = {
    image = "lscr.io/linuxserver/qbittorrent:latest";
    environment = {
      "DOCKER_MODS" = "ghcr.io/vuetorrent/vuetorrent-lsio-mod:latest";
      "PGID" = "1000";
      "PUID" = "1000";
      "TP_COMMUNITY_THEME" = "true";
      "TP_THEME" = "catppuccin-mocha";
      "TZ" = "America/Toronto";
      "WEBUI_PORT" = "6011";
    };
    volumes = [
      "/home/evren/services/qbittorrent:/config:rw"
      "/mnt/hdd/downloads:/downloads:rw"
    ];
    dependsOn = [
      "gluetun"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:gluetun"
    ];
  };
  systemd.services."podman-qbittorrent" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-torrent-root.target"
    ];
    wantedBy = [
      "podman-compose-torrent-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-torrent_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f torrent_default";
    };
    script = ''
      podman network inspect torrent_default || podman network create torrent_default
    '';
    partOf = [ "podman-compose-torrent-root.target" ];
    wantedBy = [ "podman-compose-torrent-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-torrent-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
